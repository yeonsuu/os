FAIL
Kernel panic in run: PANIC at ../../devices/disk.c:436 in select_sector(): assertion `sec_no < d->capacity' failed.
Call stack: 0xc0107276 0xc0104cee 0xc01046e3 0xc010c5fe 0xc010bade 0xc010b068 0xc010ada8 0xc0101745 0xc010191b 0x804a091 0x80480e7 0x8048127 0x8048700
Translation of call stack:
In kernel.o:
0xc0107276: debug_panic (.../../lib/kernel/debug.c:34)
0xc0104cee: select_sector (.../../../devices/disk.c:437)
0xc01046e3: disk_read (.../../../devices/disk.c:230)
0xc010c5fe: inode_read_at (...../../filesys/inode.c:239)
0xc010bade: file_read (...d/../../filesys/file.c:72)
0xc010b068: sys_read (...../userprog/syscall.c:277)
0xc010ada8: syscall_handler (...../userprog/syscall.c:100)
0xc0101745: intr_handler (..../threads/interrupt.c:361)
0xc010191b: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/read-bad-ptr:
0x0804a091: read (...../lib/user/syscall.c:117)
0x080480e7: test_main (...serprog/read-bad-ptr.c:15)
0x08048127: main (...ild/../../tests/main.c:13)
0x08048700: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

This assertion commonly fails when accessing a file via an inode that
has been closed and freed.  Freeing an inode clears all its sector
indexes to 0xcccccccc, which is not a valid sector number for disks
smaller than about 1.6 TB.
